"use client";
import { useState, memo } from "react";

// Helper function to generate a unique ID for list items
const generateUniqueId = () => crypto.randomUUID();

// Reusable Input Component, optimized with memo()
const InputField = memo(({ name, label, type = "text", value, onChange }) => (
  <div className="flex flex-col">
    <label htmlFor={name} className="mb-1 font-medium text-gray-700">
      {label}
    </label>
    <input
      id={name}
      name={name}
      type={type}
      value={value}
      onChange={onChange}
      className="border text-[#333333] border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
  </div>
));

InputField.displayName = 'InputField';

export default function Page() {
  const [formData, setFormData] = useState({
    serial_number: "",
    office_name: "",
    mouzaJL_no: "",
    upazila_thana: "",
    district_name: "",
    holding_no: "",
    khatian_no: "",
    net_jomir_poriman: "",
    moreThenThreeYearBokoya: "",
    lastThreeYearBokoya: "",
    bokoyaJoriman: "",
    halDabi: "",
    totalDabi: "",
    totalBokoya: "",
  });

  const [owners, setOwners] = useState([
    { id: generateUniqueId(), owner_name: "", owner_share: "" }
  ]);

  const [landDetails, setLandDetails] = useState([
    { id: generateUniqueId(), land_sl: "", dag_no: "", jomir_type: "", jomir_poriman: "" }
  ]);

  const [loading, setLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState("");

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleOwnerChange = (id, field, value) => {
    const updatedOwners = owners.map((owner) => 
      owner.id === id ? { ...owner, [field]: value } : owner
    );
    setOwners(updatedOwners);
  };

  const handleLandDetailChange = (id, field, value) => {
    const updatedLandDetails = landDetails.map((detail) =>
      detail.id === id ? { ...detail, [field]: value } : detail
    );
    setLandDetails(updatedLandDetails);
  };

  const addOwner = () => {
    setOwners([...owners, { id: generateUniqueId(), owner_name: "", owner_share: "" }]);
  };

  const addLandDetail = () => {
    setLandDetails([...landDetails, { id: generateUniqueId(), land_sl: "", dag_no: "", jomir_type: "", jomir_poriman: "" }]);
  };

  const removeOwner = (id) => {
    if (owners.length > 1) {
      setOwners(owners.filter((owner) => owner.id !== id));
    }
  };

  const removeLandDetail = (id) => {
    if (landDetails.length > 1) {
      setLandDetails(landDetails.filter((detail) => detail.id !== id));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setStatusMessage("");

    const completeFormData = {
      ...formData,
      owners: owners,
      landDetails: landDetails
    };

    try {
      const response = await fetch('/api/land-tax', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(completeFormData)
      });

      const result = await response.json();
      
      if (response.ok) {
        setStatusMessage("‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ: " + result.message);
      } else {
        setStatusMessage("‡¶°‡ßá‡¶ü‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + result.message);
      }
    } catch (error) {
      setStatusMessage("‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶°‡ßá‡¶ü‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white">
      <div className="container mx-auto px-4 py-8">
        <h2 className="text-3xl font-bold text-center mb-6 text-blue-700">
          ‡¶≠‡ßÇ‡¶Æ‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶Ø‡¶º‡¶® ‡¶ï‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶∞‡¶∏‡¶ø‡¶¶
        </h2>
        
        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø Section */}
          <h3 className="col-span-2 text-xl font-semibold text-gray-800 border-b pb-2">
            üìå ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø
          </h3>
          <InputField 
            name="serial_number" 
            label="‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç" 
            value={formData.serial_number} 
            onChange={handleChange} 
          />
          <InputField 
            name="office_name" 
            label="‡¶∏‡¶ø‡¶ü‡¶ø ‡¶ï‡¶∞‡ßç‡¶™‡ßã‡¶∞‡ßá‡¶∂‡¶®/ ‡¶™‡ßå‡¶∞/ ‡¶á‡¶â‡¶®‡¶ø‡¶Ø‡¶º‡¶® ‡¶≠‡ßÇ‡¶Æ‡¶ø ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" 
            value={formData.office_name} 
            onChange={handleChange} 
          />
          <InputField 
            name="mouzaJL_no" 
            label="‡¶Æ‡ßå‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ì ‡¶ú‡ßá. ‡¶è‡¶≤. ‡¶®‡¶Ç:" 
            value={formData.mouzaJL_no} 
            onChange={handleChange} 
          />
          <InputField 
            name="upazila_thana" 
            label="‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ/‡¶•‡¶æ‡¶®‡¶æ:" 
            value={formData.upazila_thana} 
            onChange={handleChange} 
          />
          <InputField 
            name="district_name" 
            label="‡¶ú‡ßá‡¶≤‡¶æ:" 
            value={formData.district_name} 
            onChange={handleChange} 
          />
          <InputField 
            name="holding_no" 
            label="‡ß® ‡¶®‡¶Ç ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶ø‡¶Ç ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:" 
            value={formData.holding_no} 
            onChange={handleChange} 
          />
          <InputField 
            name="khatian_no" 
            label="‡¶ñ‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶®‡¶Ç:" 
            value={formData.khatian_no} 
            onChange={handleChange} 
          />

          {/* ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ Section - Multiple Owner Support */}
          <div className="col-span-2">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-semibold text-gray-800 border-b pb-2">
                üë§ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£
              </h3>
              <button
                type="button"
                onClick={addOwner}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-200 text-sm font-semibold"
              >
                + ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
              </button>
            </div>
            
            {/* Dynamic Owner Fields */}
            {owners.map((owner) => (
              <div key={owner.id} className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                <div className="flex items-center justify-between col-span-2 mb-2">
                  <h4 className="font-medium text-gray-700">‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï</h4>
                  {owners.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeOwner(owner.id)}
                      className="text-red-600 hover:text-red-800 text-sm font-medium bg-red-100 px-2 py-1 rounded"
                    >
                      ‚úï ‡¶∏‡¶∞‡¶æ‡¶®
                    </button>
                  )}
                </div>
                
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
                  </label>
                  <input
                    type="text"
                    value={owner.owner_name}
                    onChange={(e) => handleOwnerChange(owner.id, 'owner_name', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                  />
                </div>
                
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂
                  </label>
                  <input
                    type="text"
                    value={owner.owner_share}
                    onChange={(e) => handleOwnerChange(owner.id, 'owner_share', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡ßß/‡ß®, ‡ßß/‡ß™, ‡ß®/‡ß©"
                  />
                </div>
              </div>
            ))}
          </div>

          {/* ‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ Section - Multiple Land Details Support */}
          <div className="col-span-2">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-semibold text-gray-800 border-b pb-2 mt-4">
                üåç ‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£
              </h3>
              <button
                type="button"
                onClick={addLandDetail}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-200 text-sm font-semibold"
              >
                + ‡¶®‡¶§‡ßÅ‡¶® ‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
              </button>
            </div>

            {/* Dynamic Land Details Fields */}
            {landDetails.map((detail) => (
              <div key={detail.id} className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                <div className="flex items-center justify-between col-span-4 mb-2">
                  <h4 className="font-medium text-gray-700">‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø</h4>
                  {landDetails.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeLandDetail(detail.id)}
                      className="text-red-600 hover:text-red-800 text-sm font-medium bg-red-100 px-2 py-1 rounded"
                    >
                      ‚úï ‡¶∏‡¶∞‡¶æ‡¶®
                    </button>
                  )}
                </div>
                
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç
                  </label>
                  <input
                    type="text"
                    value={detail.land_sl}
                    onChange={(e) => handleLandDetailChange(detail.id, 'land_sl', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶¶‡¶æ‡¶ó ‡¶®‡¶Ç
                  </label>
                  <input
                    type="text"
                    value={detail.dag_no}
                    onChange={(e) => handleLandDetailChange(detail.id, 'dag_no', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶¶‡¶æ‡¶ó ‡¶®‡¶Ç"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø
                  </label>
                  <input
                    type="text"
                    value={detail.jomir_type}
                    onChange={(e) => handleLandDetailChange(detail.id, 'jomir_type', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="mb-1 font-medium text-gray-700">
                    ‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂)
                  </label>
                  <input
                    type="text"
                    value={detail.jomir_poriman}
                    onChange={(e) => handleLandDetailChange(detail.id, 'jomir_poriman', e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£"
                  />
                </div>
              </div>
            ))}
          </div>

          <InputField 
            name="net_jomir_poriman" 
            label="‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Æ‡¶ø (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂)" 
            value={formData.net_jomir_poriman} 
            onChange={handleChange} 
          />

          {/* ‡¶Ü‡¶¶‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ Section */}
          <h3 className="col-span-2 text-xl font-semibold text-gray-800 border-b pb-2 mt-4">
            üí∞ ‡¶Ü‡¶¶‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£
          </h3>
          <InputField
            name="moreThenThreeYearBokoya"
            label="‡¶§‡¶ø‡¶® ‡¶¨‡ßé‡¶∏‡¶∞‡ßá‡¶∞ ‡¶ä‡¶∞‡ßç‡¶ß‡ßç‡¶¨‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ"
            value={formData.moreThenThreeYearBokoya}
            onChange={handleChange}
          />
          <InputField 
            name="lastThreeYearBokoya" 
            label="‡¶ó‡¶§ ‡¶§‡¶ø‡¶® ‡¶¨‡ßé‡¶∏‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ" 
            value={formData.lastThreeYearBokoya} 
            onChange={handleChange} 
          />
          <InputField 
            name="bokoyaJoriman" 
            label="‡¶¨‡¶ï‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æ ‡¶ì ‡¶ï‡ßç‡¶∑‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡¶£" 
            value={formData.bokoyaJoriman} 
            onChange={handleChange} 
          />
          <InputField 
            name="halDabi" 
            label="‡¶π‡¶æ‡¶≤ ‡¶¶‡¶æ‡¶¨‡¶ø" 
            value={formData.halDabi} 
            onChange={handleChange} 
          />
          <InputField 
            name="totalDabi" 
            label="‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶¨‡¶ø" 
            value={formData.totalDabi} 
            onChange={handleChange} 
          />
          <InputField 
            name="totalBokoya" 
            label="‡¶Æ‡ßã‡¶ü ‡¶Ü‡¶¶‡¶æ‡¶Ø‡¶º" 
            value={formData.totalBokoya} 
            onChange={handleChange} 
          />
          
          {/* Status and loading indicators */}
          {statusMessage && (
            <div className={`col-span-2 p-4 rounded-lg text-center font-medium ${
              statusMessage.includes("‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá") ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"
            }`}>
              {statusMessage}
            </div>
          )}

          {/* Submit Button */}
          <div className="col-span-2 flex justify-center mt-6">
            <button
              type="submit"
              disabled={loading}
              className="bg-blue-600 text-white font-semibold px-8 py-3 rounded-lg shadow hover:bg-blue-700 transition duration-200 cursor-pointer disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              {loading ? "‡¶ú‡¶Æ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶´‡¶∞‡ßç‡¶Æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
